========================================
JVM实用参数（七）CMS收集器 http://ifeve.com/useful-jvm-flags-part-7-cms-collector/
CMS 垃圾回收机制原理，面试必知必会 ！ http://www.sohu.com/a/214780788_753508

2.4 对象死亡（被回收）前的最后一次挣扎
  即使在可达性分析算法中不可达的对象，也并非是“非死不可”，这时候它们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，
    至少要经历两次标记过程。

  第一次标记：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记；
  第二次标记：第一次标记后接着会进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。在finalize()方法中没有重新与引用链建立关联关系的，将被进行第二次标记。
  第二次标记成功的对象将真的会被回收，如果对象在finalize()方法中重新与引用链建立了关联关系，那么将会逃离本次回收，继续存活。猿们还跟的上吧，嘿嘿。

2.5 方法区如何判断是否需要回收
  方法区存储内容是否需要回收的判断可就不一样咯。方法区主要回收的内容有：废弃常量和无用的类。
    2.5.1.对于废弃常量也可通过引用的可达性来判断，
    2.5.2 但是对于无用的类则需要同时满足下面3个条件：
        该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例；
        加载该类的ClassLoader已经被回收；
        该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。
        关于类加载的原理，也是阿里面试的主角，面试官也问过我比如：能否自己定义String，答案是不行，因为jvm在加载类的时候会执行双亲委派，
========================================
3.1 标记-清除算法（Mark-Sweep）
  标记-清除算法采用从根集合（GC Roots）进行扫描，对存活的对象进行标记，
    标记完毕后，再扫描整个空间中未被标记的对象，进行回收。
    标记-清除算法不需要进行对象的移动，
    只需对不存活的对象进行处理，在存活对象比较多的情况下极为高效，
    但由于标记-清除算法直接回收不存活的对象，因此会造成内存碎片。

3.2 复制算法(Copying)
  复制算法的提出是为了克服句柄的开销和解决内存碎片的问题。
    它开始时把堆分成 一个对象面和多个空闲面，
    程序从对象面为对象分配空间，当对象满了，基于copying算法的垃圾收集就从根集合（GC Roots）中扫描活动对象，
    并将每个活动对象复制到空闲面(使得活动对象所占的内存之间没有空闲洞)，
    这样空闲面变成了对象面，原来的对象面变成了空闲面，程序会在新的对象面中分配内存。

3.3 标记-整理算法(Mark-compact)
  标记-整理算法采用标记-清除算法一样的方式进行对象的标记，但在清除时不同，在回收不存活的对象占用的空间后，
    会将所有的存活对象往左端空闲空间移动，并更新对应的指针。
    标记-整理算法是在标记-清除算法的基础上，又进行了对象的移动，
    因此成本更高，但是却解决了内存碎片的问题。
3.4 分代收集算法
  分代收集算法是目前大部分JVM的垃圾收集器采用的算法。它的核心思想是根据对象存活的生命周期将内存划分为若干个不同的区域。
    一般情况下将堆区划分为老年代（Tenured Generation）和新生代（Young Generation），
    在堆区之外还有一个代就是永久代（Permanet Generation）。
    老年代的特点是每次垃圾收集时只有少量对象需要被回收，
    而新生代的特点是每次垃圾回收时都有大量的对象需要被回收，那么就可以根据不同代的特点采取最适合的收集算法。
3.4.1 年轻代（Young Generation）的回收算法 (回收主要以Copying为主)
    a) 所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。
    b) 新生代内存按照8:1:1的比例分为一个eden区和两个survivor(survivor0,survivor1)区。
       一个Eden区，两个 Survivor区(一般而言)。大部分对象在Eden区中生成。
       回收时先将eden区存活对象复制到一个survivor0区，然后清空eden区，
       当这个survivor0区也存放满了时，则将eden区和survivor0区存活对象复制到另一个survivor1区，
       然后清空eden和这个survivor0区，此时survivor0区是空的，
       然后将survivor0区和survivor1区交换，即保持survivor1区为空， 如此往复。
    c) 当survivor1区不足以存放 eden和survivor0的存活对象时，就将存活对象直接存放到老年代。
       若是老年代也满了就会触发一次Full GC(Major GC)，也就是新生代、老年代都进行回收。
    d) 新生代发生的GC也叫做Minor GC，MinorGC发生频率比较高(不一定等Eden区满了才触发)。
3.4.2 年老代（Old Generation）的回收算法（回收主要以Mark-Compact为主）
    a) 在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。
       因此，可以认为年老代中存放的都是一些生命周期较长的对象。
    b) 内存比新生代也大很多(大概比例是1:2)，当老年代内存满时触发Major GC, 即Full GC，Full GC发生频率比较低，
       老年代对象存活时间比较长，存活率标记高。
3.4.3 持久代（Permanent Generation）的回收算法
    用于存放静态文件，如Java类、方法等。
        持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，
      例如Hibernate 等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。
      持久代也称方法区，具体的回收可参见上文2.5节。
========================================
CMD java -Xms2g -Xmx2g -Xmn1g -server -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSClassUnloadingEnabled -XX:+PrintGCTimeStamps -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+UseCMSInitiatingOccupancyOnly -jar vsr-camera-exec.jar
CMD java -Xms2g -Xmx2g -Xmn1g -server -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSClassUnloadingEnabled -XX:+PrintGCTimeStamps -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+UseCMSInitiatingOccupancyOnly -jar vsr-plantask-exec.jar
CMD java -Xms2g -Xmx2g -Xmn1g -server -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 -XX:+CMSClassUnloadingEnabled -XX:+PrintGCTimeStamps -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+UseCMSInitiatingOccupancyOnly -jar vsr-dashboard-exec.jar
CMD java
    -Xms2g
    -Xmx2g
    -Xmn1g
    -server
    -XX:+UseConcMarkSweepGC               // (CMS) 老年代使用CMS垃圾回收器,使用场景：GC过程短暂停，适合对时延要求较高的服务，用户线程不允许长时间的停顿。
    -XX:CMSInitiatingOccupancyFraction=70 // 触发GC条件2:老年代使用率达到阈值 CMSInitiatingOccupancyFraction，默认92%
    -XX:+CMSClassUnloadingEnabled         // 触发GC条件3:永久代的使用率达到阈值 CMSInitiatingPermOccupancyFraction，默认92%，前提是开启 CMSClassUnloadingEnabled
    -XX:+PrintGCTimeStamps
    -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses // Full gc有更少的停机时间,相比Full gc，CMS收集器会花费更多的时间，如果对QPS比较敏感的应用应降低CMS触发的次数。
                                                      // https://blog.csdn.net/aesop_wubo/article/details/38406709
                                                      // 保证当有系统GC调用时，永久代也被包括进CMS垃圾回收的范围内
    -XX:+PrintGCDetails
    -XX:+PrintGCDateStamps
    -XX:+UseCMSInitiatingOccupancyOnly // 触发GC条件1:如果没有设置 UseCMSInitiatingOccupancyOnly，虚拟机会根据收集的数据决定是否触发
                                       //（线上环境建议带上这个参数，不然会加大问题排查的难度）
                                       // 只是用设定的回收阈值(上面指定的70%),如果不指定,JVM仅在第一次使用设定值,后续则自动调整.
                                       //
                                       // 我们用-XX+UseCMSInitiatingOccupancyOnly标志来命令JVM不基于运行时收集的数据来启动CMS垃圾收集周期。
                                       // 而是，当该标志被开启时，JVM通过CMSInitiatingOccupancyFraction的值进行每一次CMS收集，而不仅仅是第一次。
                                       //
                                       // 然而，请记住大多数情况下，JVM比我们自己能作出更好的垃圾收集决策。
                                       // 因此，只有当我们充足的理由(比如测试)并且对应用程序产生的对象的生命周期有深刻的认知时，才应该使用该标志。
    -jar vsr-openapi-exec.jar

====================================
	HotSpot虚拟机包含的所有收集器
    Serial收集器（复制算法)
        新生代单线程收集器，标记和清理都是单线程，优点是简单高效。
        是client级别默认的GC方式，可以通过-XX:+UseSerialGC来强制指定。
    Serial Old收集器(标记-整理算法)
        老年代单线程收集器，Serial收集器的老年代版本。
    ParNew收集器(停止-复制算法)　
        新生代收集器，可以认为是Serial收集器的多线程版本,在多核CPU环境下有着比Serial更好的表现。
    Parallel Scavenge收集器(停止-复制算法)
        并行收集器，追求高吞吐量，高效利用CPU。吞吐量一般为99%，吞吐量=用户线程时间/(用户线程时间+GC线程时间)。
        适合后台应用等对交互响应要求不高的场景。是server级别默认采用的GC方式，
        可用-XX:+UseParallelGC来强制指定，
          用-XX:ParallelGCThreads=4来指定线程数。
    Parallel Old收集器(停止-复制算法)
    Parallel Scavenge收集器的老年代版本，并行收集器，吞吐量优先。
    CMS(Concurrent Mark Sweep)收集器（标记-清理算法）
        高并发、低停顿，追求最短GC回收停顿时间，cpu占用比较高，响应时间快，停顿时间短，多核cpu 追求高响应时间的选择。
        http://ifeve.com/useful-jvm-flags-part-7-cms-collector/
        CMS收集器的过程
            CMS收集器的GC周期由6个阶段组成。其中4个阶段(名字以Concurrent开始的)与实际的应用程序是并发执行的，而其他2个阶段需要暂停应用程序线程。
                1.初始标记：为了收集应用程序的对象引用需要暂停应用程序线程，该阶段完成后，应用程序线程再次启动。
                2.并发标记：从第一阶段收集到的对象引用开始，遍历所有其他的对象引用。
                3.并发预清理：改变当运行第二阶段时，由应用程序线程产生的对象引用，以更新第二阶段的结果。
                4.重标记：由于第三阶段是并发的，对象引用可能会发生进一步改变。因此，应用程序线程会再一次被暂停以更新这些变化，并且在进行实际的清理之前确保一个正确的对象引用视图。这一阶段十分重要，因为必须避免收集到仍被引用的对象。
                5.并发清理：所有不再被应用的对象将从堆里清除掉。
                6.并发重置：收集器做一些收尾的工作，以便下一次GC周期能有一个干净的状态。
        一个常见的误解是,CMS收集器运行是完全与应用程序并发的。我们已经看到，事实并非如此，即使“stop-the-world”阶段相对于并发阶段的时间很短。
	CMS和G1的垃圾回收器的原理
=======================================
	GC是什么时候触发的（面试最常见的问题之一）
    5.1 Scavenge GC
      一般情况下，当新对象生成，并且在Eden申请空间失败时，就会触发Scavenge GC，对Eden区域进行GC，清除非存活对象，
        并且把尚且存活的对象移动到Survivor区。
        然后整理Survivor的两个区。这种方式的GC是对年轻代的Eden区进行，不会影响到年老代。
        因为，大部分对象都是从Eden区开始的，同时Eden区不会分配的很大，所以Eden区的GC会频繁进行。
        因而，一般在这里需要使用速度快、效率高的算法，使Eden去能尽快空闲出来。
    5.2 Full GC
      对整个堆进行整理，包括Young、Tenured和Perm。
        Full GC因为需要对整个堆进行回收，所以比Scavenge GC要慢，
        因此应该尽可能减少Full GC的次数。在对JVM调优的过程中，很大一部分工作就是对于Full GC的调节。
        有如下原因可能导致Full GC：
            a) 年老代（Tenured）被写满；
            b) 持久代（Perm）被写满；
            c) System.gc()被显示调用；
            d) 上一次GC之后Heap的各域分配策略动态变化；
